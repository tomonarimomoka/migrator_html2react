import { FC } from "react";
import {HeaderNav , SubTitle , ReadBtn ,References} from '../Parts';
import './style.css'

export const SimpleTest: FC = () => {
  var ref:string[][] = [[] ,[] ,[] ] 
  return(
    <>
  
<HeaderNav />
  <main className="box">
    <h1 id="articleTitle">ブラックボックステストのテスト技法</h1>
    <div className="right">
      🕓本記事の最終更新日は
      <time id="modify"></time>
      です。
      <script>
        /* 更新日の取得 */
        const last = new Date(document.lastModified);
        const year = last.getFullYear();
        const month = last.getMonth() + 1;
        const date = last.getDate();
        /* 日付を書き換える */
        const target = document.getElementById('modify');
        target.textContent = year + '-' + month + '-' + date;
      </script>
    </div>
    
    
    <SubTitle subTitle="筆者のスペック" />
    <ul>
      <li>社会人２年生</li>
      <li>学生の頃のプログラマー経験を活かし、今はソフトウェアエンジニア</li>
      <li>プログラミング以外のエンジニアに必要なことは勉強中</li>
    </ul>
    <SubTitle subTitle="よ～し、実装できた！単体テスト仕様書サクッと作ろう！" />
    <p>
      私は、人生で初めてソフトウェアエンジニアとして要件定義、設計、製造、テスト仕様書作成全てを一人で任せてもいただきました。
    </p>
    <p>
      設計ではかなり苦労し、連日頭をひねりつぶして考え、製造では自社フレームワークに悩まされつつ、プログラマ経験を生かしてなんとか実装して、ちゃんと動いた！
      設計書を実装に合わせて書き直し、あとはサクッと単体テスト仕様書を作って終わらせよう！（テスト実施は外注）
    </p>
    
    <p>
      と、思っていたら、、、単体テスト仕様書、ちゃんと書いていたつもりだけど、レビュー指摘の嵐でした。悔しさをばねに勉強しました。
    </p>

    <p>
      そんな私が、テスト仕様書を初めて作るあなたに向けて、解説します！
    </p>

    <SubTitle subTitle="テスト仕様書とは？" />
    <p>
      テスト仕様書とは、以下を記載したドキュメントのこと
    </p>
    <ul>
      <li>テストの条件</li>
      <li>テスト操作</li>
      <li>期待結果</li>
    </ul>
    
    <SubTitle subTitle="単体テストとは？" />
    <p>
      単体テストの定義を調べると色んな定義が出てきますが、要するに結合テストの前に行うテストのことです。
    </p>
    <p>
      「単体テスト」という言葉は会社によって取り決めがあることも多いようです。
      例えばJavaなどのオブジェクト指向言語はクラス単位で単体テストを実施すると定義されていますが、私の会社では機能ごとでのテストです。
    </p>
    <h4>参考</h4>
    Lee Copeland. "第1章　テストのプロセス". 初めて学ぶソフトフェアテスト技法, 2021
    <br/>
    佐々木　真 , 2022 , <a href="https://wa3.i-3-i.info/word15916.html">単体テスト（UT）</a>
    <br/>

    <SubTitle subTitle="ブラックボックス" />
    <h3>ブラックボックスとは？</h3>
    <p>
      要件と設計書のみを見て行うテスト戦略 = 実装を確認しない
    </p>
    <p>
      ブラックボックステストには、様々なテスト技法があります。本記事ではこれだけは知っておきたい！というものに厳選して解説します。
    </p>
    
    <h4>参考</h4>
    Lee Copeland. "第1章　テストのプロセス". 初めて学ぶソフトフェアテスト技法, 2021

    <SubTitle subTitle="同値クラステスト" />
    <h3>同値クラステストとは？</h3>
    <p>
      有効値、無効値でテストするテスト技法      
    </p>
    <blockquote>
      <p>
        同値クラスとは、モジュールで同等に評価されるデータ、あるいは同じ結果を返すデータの集合を意味します。
      </p>
      <cite>
        Lee Copeland.[著] 初めて学ぶソフトフェアテスト技法
      </cite>
    </blockquote>
    <p>例えば、60点以上で合格の試験があって、合格の時は「おめでとうございます！合格です。」と表示、不合格の時は再受験申込フォームに遷移させる処理を考えましょう。</p>
    <img src="../素材/同値クラス.png" className="imgSize_60" alt="同値クラスイメージ">
    <p>60点でも、61点でも100点でも「おめでとうございます！合格です。」と表示し、58点でも3点でも10点でも、再受験申込フォームに遷移するのが正しい仕様です。</p>
    <code className="codeBlock">
      0 ≦ x ＜ 60 , 60 ≦ y ≦ 100
    </code>
    <p>x , y はそれぞれ別の同値クラスということができます。</p>
    <h3>詳細</h3>
    <p>
      有効値のとりうるパターンが少ない時は全てテストを実施し、パターンが多い場合は、その機能の重要度にや組織にとってのリスクによって、どの程度までテスト実施するか決める。
    </p>
    <p>
      有効なデータのみのテストは単一でも良く、有効データのテストケースを増やしてもバグが見つかることは稀。
      無効値には１つの無効値がほかの項目の入力値のエラーを取り消すことがあるため、入力値が3つあったら、3つのうち1つの入力値が無効値であるテストケースを3つ作り、システムの挙動を調べる必要があります。
    </p>
    
    <blockquote>
      <p>
        1つの入力項目のエラーが別の項目のエラーを帳消しにしたり覆い隠したりした結果、システムがそれを有効データとして受け入れることは、そう珍しくありません。
      </p>
      <cite>
        Lee Copeland.[著] 初めて学ぶソフトフェアテスト技法
      </cite>
    </blockquote>

    <h4>参考</h4>
    Lee Copeland. "第3章　同値クラステスト". 初めて学ぶソフトフェアテスト技法, 2021

    <SubTitle subTitle="境界値テスト" />
    <h3>境界値テストとは？</h3>
    <p>処理が変わる境界値付近を調べるテスト技法</p>
    
    <h3>詳細</h3>
    <p>
      プログラマーなら、境界値にはバグが潜んでいる確率が高いのは経験則でわかるでしょう。
    </p>
    <p>テストするのは<b>境界値のすぐ下、境界値、境界値のすぐ上</b>です。</p>
    <img src="../素材/境界値テスト.png" className="imgSize_60" alt="境界値テストイメージ">
    <p>再び、60点以上で合格の試験があって、合格の時は「おめでとうございます！合格です。」と表示、不合格の時は再受験申込フォームに遷移させる処理を考えましょう。</p>
    <p>境界値のすぐ下は59点、境界値は60点、境界値のすぐ上は61点ですね。</p>
    <p>■境界値テストと同値クラステスト<br/>
      ここで、同値クラステストの章ではは60点も、61点も同値クラスになるからテストは1ケースでよいはずだが、
      境界値テストでは59点,60点,61点をテストすることになります。
    </p>
    <p>61点はテストすべきでしょうか？</p>
    <p>上記のように、境界付近の値が別の同値クラスに含まれる場合はテスト実施は必要ないと言われています。</p>
    <h4>参考</h4>
    Lee Copeland. "第4章　境界値テスト". 初めて学ぶソフトフェアテスト技法, 2021

    <SubTitle subTitle="デシジョンテーブルテスト" />
    <h3>デシジョンテーブルテストとは？</h3>
    <p>テストの条件と期待結果を組み合わせた表を用いるテスト技法</p>

    <h3>詳細</h3>
    <p>
      デシジョンテーブルはそのままテスト仕様書としても使うことができる。具体的には以下がデシジョンテーブル。
    </p>
    <table>
      <caption>デシジョンテーブル</caption>
      <tr><th>テストNo</th><th>１</th><th>２</th><th>３</th></tr>
      <tr><th>条件１</th><td>true</td><td>true</td><td>true</td></tr>
      <tr><th>条件２</th><td>true</td><td>false</td><td>false</td></tr>
      <tr><th>条件３</th><td>false</td><td>true</td><td>false</td></tr>
      <tr><th>期待結果</th><td>成功</td><td>エラー</td><td>更新されない</td></tr>
    </table>
    <P>
      ■すべての条件の組み合わせを含めよう<br/>
      3つの条件のうち１つがAなら、期待結果は必ずBになる場合は、ほかの2つの条件を変化させてテストする必要は内容に思います。
      しかし、デシジョンテーブルの縮小は、間違えると誤ったテストケースを作成してしまうのでやめましょう。
    </P>
    <h4>参考</h4>
    Lee Copeland. "第5章　デシジョンテーブルテスト". 初めて学ぶソフトフェアテスト技法, 2021


    <SubTitle subTitle="ペア構成テスト" />
    <h3>ペア構成テストとは？</h3>
    <P>
      ペア構成テストとは、条件の全ての組み合わせではなく、全ての条件のペアの組み合わせをテストするテスト技法
    </P>

    <h3>このテスト技法が有効なケース</h3>
    <ul>
      <li>条件を組み合わせる場合</li>
      <li>テストケースが多いとき</li>
    </ul>

    <h3>詳細</h3>
    <p>
      ふつう、すべての組み合わせでテストしようとしますが、「テストケースが多すぎる！！」というときがありますよね。
      そんな時はテストケース削減のため、ペア構成テストの実施を検討しましょう。
    </p>
    <P>
      当然、全ての条件のペアの組み合わせをテストするだけで十分なのか？という疑問が生まれます。
      残念ながら、ペア構成テストの有効性を示すロジックが分かっているわけではありません。
      但し、このテスト技法は様々なプロジェクトで使われて、開発者を満足させている事実があるのです。
    </P> 
    <blockquote>
      <p>
        戦後日本の製造業発展は直交表の効果と言う人もいるほど効果的な手法
      </p>
      <cite>引用：<a href="https://www.monodukuri.com/gihou/article_list/47/%e7%9b%b4%e4%ba%a4%e8%a1%a8">直交表とは</a></cite>
    </blockquote>

    <p>
      さて、ペア構成テストには2種類の考え方があります。
      残念ながら筆者は数学者ではなく、ただのソフトフェアエンジニアなので、数学的な解説はできませんので、ご了承ください。
    </p>
    <p>■直交表</p>
    <ul>
      <li>数学者のオイラーが考えたと言われている</li>
      <li>直交表を用いた工業実験の計画は主に日本で発展した</li>
      <li>任意の二列を選ぶと全てのペアを持つ</li>
      <li>全てのペアがテストケースに同じ数だけ現れる（均衡が保たれる）</li>
    </ul>
    <table>
      <caption>L_4(2^3)直交表</caption>
      <tr><th></th><th>条件１</th><th>条件２</th><th>条件３</th></tr>
      <tr><th>テストケース１</th><td>true</td><td>true</td><td>true</td></tr>
      <tr><th>テストケース２</th><td>true</td><td>false</td><td>false</td></tr>
      <tr><th>テストケース３</th><td>false</td><td>true</td><td>false</td></tr>
      <tr><th>テストケース４</th><td>false</td><td>false</td><td>true</td></tr>
    </table>

    <p>■全ペアアルゴリズム</p>
    <ul>
      <li>ペアは1回以上テストケースに現れればよい（均衡は保たれない）</li>
      <li>直交表よりもテストケースが少なくなる</li>
      <li>テストケース作成のためのツールは世の中に沢山ある</li>
    </ul>

    <p>
      ■テスト技法としては有名だが、業務で使われにくいペア構成テスト<br/>
      「うちの会社では使ったことがないけど」というエンジニアの皆様がいらっしゃると思います。
      実は私の会社でも使っていません。やはり、テストケースを省くリスクを考えると躊躇するのでしょう。
    </p>
    
    <h4>参考リンク</h4>
    Lee Copeland. "第6章 ペア構成テスト". 初めて学ぶソフトフェアテスト技法, 2021
    <br/>
    2019.06.16 , <a href="https://sigma-eye.com/2019/06/16/chokkouhyou-reason/">直交表はなぜ使われないのか？【ともかく使ってみるしかない！】</a>
    <br/>
    Fumikazu Fujiwara , 2020.05.18 , <a href="https://qiita.com/freddiefujiwara/items/24b7bb07345d93982729">ペアワイズ テストのアルゴリズムを実装して学ぼう</a>
    <br/>
    Ryoma Maeda , 2022.10.21 , <a href="https://qiita.com/RyomaMaeda/items/27456cd5f01cdb8f4598">組合せテストの技法: ペアワイズ法(オールペア法)を3分で理解する</a>
    <br/>
    SSAITS（サイツ）社 , 2022.06.06 , <a href="https://ssaits.jp/promapedia/method/oat_all-pair.html">直交表（OAT）とオールペア法（ペアワイズ法）の違いとは何か？２つのテストケース作成技法を解説</a>
    <br/>
    熊坂 治（ものづくりドットコム社） , 2022 , <a href="https://www.monodukuri.com/gihou/article_list/47/%e7%9b%b4%e4%ba%a4%e8%a1%a8">「直交表」とは</a>
    <br/>
    菱祐一（株式会社NTTデータMSE） , 2022 , <a href="https://jasst.jp/archives/jasst09s/pdf/S5-1.pdf#:~:text=%E7%9B%B4%E4%BA%A4%E8%A1%A8%E3%81%AE%E7%89%B9%E5%BE%B4%3D%E5%B0%91,%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B%E3%81%AE%E3%81%8C%E6%9C%89%E5%8A%B9">直交表の欠点と克服</a>
    <br/>
    
    <SubTitle subTitle="おわりに" />
    <p>最後まで読んでくださり、ありがとうございました。</p>
    <p>テストが好きなエンジニアは少ないと思いますが、品質を保証するためにとても大切なので、頑張ってテストしましょー！</p>
  </main>
    </>
  );
}